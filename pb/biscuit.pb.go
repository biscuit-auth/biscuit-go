// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: biscuit.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ID_Kind int32

const (
	ID_SYMBOL   ID_Kind = 0
	ID_VARIABLE ID_Kind = 1
	ID_INTEGER  ID_Kind = 2
	ID_STR      ID_Kind = 3
	ID_DATE     ID_Kind = 4
	ID_BYTES    ID_Kind = 5
	ID_SET      ID_Kind = 6
)

// Enum value maps for ID_Kind.
var (
	ID_Kind_name = map[int32]string{
		0: "SYMBOL",
		1: "VARIABLE",
		2: "INTEGER",
		3: "STR",
		4: "DATE",
		5: "BYTES",
		6: "SET",
	}
	ID_Kind_value = map[string]int32{
		"SYMBOL":   0,
		"VARIABLE": 1,
		"INTEGER":  2,
		"STR":      3,
		"DATE":     4,
		"BYTES":    5,
		"SET":      6,
	}
)

func (x ID_Kind) Enum() *ID_Kind {
	p := new(ID_Kind)
	*p = x
	return p
}

func (x ID_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ID_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[0].Descriptor()
}

func (ID_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[0]
}

func (x ID_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ID_Kind.Descriptor instead.
func (ID_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{8, 0}
}

type Constraint_Kind int32

const (
	Constraint_INT    Constraint_Kind = 0
	Constraint_STRING Constraint_Kind = 1
	Constraint_DATE   Constraint_Kind = 2
	Constraint_SYMBOL Constraint_Kind = 3
	Constraint_BYTES  Constraint_Kind = 4
	Constraint_SET    Constraint_Kind = 5
)

// Enum value maps for Constraint_Kind.
var (
	Constraint_Kind_name = map[int32]string{
		0: "INT",
		1: "STRING",
		2: "DATE",
		3: "SYMBOL",
		4: "BYTES",
		5: "SET",
	}
	Constraint_Kind_value = map[string]int32{
		"INT":    0,
		"STRING": 1,
		"DATE":   2,
		"SYMBOL": 3,
		"BYTES":  4,
		"SET":    5,
	}
)

func (x Constraint_Kind) Enum() *Constraint_Kind {
	p := new(Constraint_Kind)
	*p = x
	return p
}

func (x Constraint_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Constraint_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[1].Descriptor()
}

func (Constraint_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[1]
}

func (x Constraint_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Constraint_Kind.Descriptor instead.
func (Constraint_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{9, 0}
}

type IntConstraint_Kind int32

const (
	IntConstraint_LOWER           IntConstraint_Kind = 0
	IntConstraint_LARGER          IntConstraint_Kind = 1
	IntConstraint_LOWER_OR_EQUAL  IntConstraint_Kind = 2
	IntConstraint_LARGER_OR_EQUAL IntConstraint_Kind = 3
	IntConstraint_EQUAL           IntConstraint_Kind = 4
	IntConstraint_IN              IntConstraint_Kind = 5
	IntConstraint_NOT_IN          IntConstraint_Kind = 6
)

// Enum value maps for IntConstraint_Kind.
var (
	IntConstraint_Kind_name = map[int32]string{
		0: "LOWER",
		1: "LARGER",
		2: "LOWER_OR_EQUAL",
		3: "LARGER_OR_EQUAL",
		4: "EQUAL",
		5: "IN",
		6: "NOT_IN",
	}
	IntConstraint_Kind_value = map[string]int32{
		"LOWER":           0,
		"LARGER":          1,
		"LOWER_OR_EQUAL":  2,
		"LARGER_OR_EQUAL": 3,
		"EQUAL":           4,
		"IN":              5,
		"NOT_IN":          6,
	}
)

func (x IntConstraint_Kind) Enum() *IntConstraint_Kind {
	p := new(IntConstraint_Kind)
	*p = x
	return p
}

func (x IntConstraint_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntConstraint_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[2].Descriptor()
}

func (IntConstraint_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[2]
}

func (x IntConstraint_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntConstraint_Kind.Descriptor instead.
func (IntConstraint_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{10, 0}
}

type StringConstraint_Kind int32

const (
	StringConstraint_PREFIX StringConstraint_Kind = 0
	StringConstraint_SUFFIX StringConstraint_Kind = 1
	StringConstraint_EQUAL  StringConstraint_Kind = 2
	StringConstraint_IN     StringConstraint_Kind = 3
	StringConstraint_NOT_IN StringConstraint_Kind = 4
	StringConstraint_REGEX  StringConstraint_Kind = 5
)

// Enum value maps for StringConstraint_Kind.
var (
	StringConstraint_Kind_name = map[int32]string{
		0: "PREFIX",
		1: "SUFFIX",
		2: "EQUAL",
		3: "IN",
		4: "NOT_IN",
		5: "REGEX",
	}
	StringConstraint_Kind_value = map[string]int32{
		"PREFIX": 0,
		"SUFFIX": 1,
		"EQUAL":  2,
		"IN":     3,
		"NOT_IN": 4,
		"REGEX":  5,
	}
)

func (x StringConstraint_Kind) Enum() *StringConstraint_Kind {
	p := new(StringConstraint_Kind)
	*p = x
	return p
}

func (x StringConstraint_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringConstraint_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[3].Descriptor()
}

func (StringConstraint_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[3]
}

func (x StringConstraint_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StringConstraint_Kind.Descriptor instead.
func (StringConstraint_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{11, 0}
}

type DateConstraint_Kind int32

const (
	DateConstraint_BEFORE DateConstraint_Kind = 0
	DateConstraint_AFTER  DateConstraint_Kind = 1
)

// Enum value maps for DateConstraint_Kind.
var (
	DateConstraint_Kind_name = map[int32]string{
		0: "BEFORE",
		1: "AFTER",
	}
	DateConstraint_Kind_value = map[string]int32{
		"BEFORE": 0,
		"AFTER":  1,
	}
)

func (x DateConstraint_Kind) Enum() *DateConstraint_Kind {
	p := new(DateConstraint_Kind)
	*p = x
	return p
}

func (x DateConstraint_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateConstraint_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[4].Descriptor()
}

func (DateConstraint_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[4]
}

func (x DateConstraint_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateConstraint_Kind.Descriptor instead.
func (DateConstraint_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{12, 0}
}

type SymbolConstraint_Kind int32

const (
	SymbolConstraint_IN     SymbolConstraint_Kind = 0
	SymbolConstraint_NOT_IN SymbolConstraint_Kind = 1
)

// Enum value maps for SymbolConstraint_Kind.
var (
	SymbolConstraint_Kind_name = map[int32]string{
		0: "IN",
		1: "NOT_IN",
	}
	SymbolConstraint_Kind_value = map[string]int32{
		"IN":     0,
		"NOT_IN": 1,
	}
)

func (x SymbolConstraint_Kind) Enum() *SymbolConstraint_Kind {
	p := new(SymbolConstraint_Kind)
	*p = x
	return p
}

func (x SymbolConstraint_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolConstraint_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[5].Descriptor()
}

func (SymbolConstraint_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[5]
}

func (x SymbolConstraint_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolConstraint_Kind.Descriptor instead.
func (SymbolConstraint_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{13, 0}
}

type BytesConstraint_Kind int32

const (
	BytesConstraint_EQUAL  BytesConstraint_Kind = 0
	BytesConstraint_IN     BytesConstraint_Kind = 1
	BytesConstraint_NOT_IN BytesConstraint_Kind = 2
)

// Enum value maps for BytesConstraint_Kind.
var (
	BytesConstraint_Kind_name = map[int32]string{
		0: "EQUAL",
		1: "IN",
		2: "NOT_IN",
	}
	BytesConstraint_Kind_value = map[string]int32{
		"EQUAL":  0,
		"IN":     1,
		"NOT_IN": 2,
	}
)

func (x BytesConstraint_Kind) Enum() *BytesConstraint_Kind {
	p := new(BytesConstraint_Kind)
	*p = x
	return p
}

func (x BytesConstraint_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BytesConstraint_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[6].Descriptor()
}

func (BytesConstraint_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[6]
}

func (x BytesConstraint_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BytesConstraint_Kind.Descriptor instead.
func (BytesConstraint_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{14, 0}
}

type Biscuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authority []byte     `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Blocks    [][]byte   `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Keys      [][]byte   `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
	Signature *Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Biscuit) Reset() {
	*x = Biscuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Biscuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Biscuit) ProtoMessage() {}

func (x *Biscuit) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Biscuit.ProtoReflect.Descriptor instead.
func (*Biscuit) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{0}
}

func (x *Biscuit) GetAuthority() []byte {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *Biscuit) GetBlocks() [][]byte {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *Biscuit) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Biscuit) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SealedBiscuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authority []byte   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Blocks    [][]byte `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Signature []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SealedBiscuit) Reset() {
	*x = SealedBiscuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealedBiscuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealedBiscuit) ProtoMessage() {}

func (x *SealedBiscuit) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealedBiscuit.ProtoReflect.Descriptor instead.
func (*SealedBiscuit) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{1}
}

func (x *SealedBiscuit) GetAuthority() []byte {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *SealedBiscuit) GetBlocks() [][]byte {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *SealedBiscuit) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters [][]byte `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Z          []byte   `protobuf:"bytes,2,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{2}
}

func (x *Signature) GetParameters() [][]byte {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Signature) GetZ() []byte {
	if x != nil {
		return x.Z
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Symbols []string  `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty"`
	Facts   []*Fact   `protobuf:"bytes,3,rep,name=facts,proto3" json:"facts,omitempty"`
	Rules   []*Rule   `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
	Caveats []*Caveat `protobuf:"bytes,5,rep,name=caveats,proto3" json:"caveats,omitempty"`
	Context string    `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
	Version uint32    `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{3}
}

func (x *Block) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Block) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *Block) GetFacts() []*Fact {
	if x != nil {
		return x.Facts
	}
	return nil
}

func (x *Block) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Block) GetCaveats() []*Caveat {
	if x != nil {
		return x.Caveats
	}
	return nil
}

func (x *Block) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *Block) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Fact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate *Predicate `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
}

func (x *Fact) Reset() {
	*x = Fact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fact) ProtoMessage() {}

func (x *Fact) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fact.ProtoReflect.Descriptor instead.
func (*Fact) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{4}
}

func (x *Fact) GetPredicate() *Predicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head        *Predicate    `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Body        []*Predicate  `protobuf:"bytes,2,rep,name=body,proto3" json:"body,omitempty"`
	Constraints []*Constraint `protobuf:"bytes,3,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{5}
}

func (x *Rule) GetHead() *Predicate {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *Rule) GetBody() []*Predicate {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Rule) GetConstraints() []*Constraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type Caveat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*Rule `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *Caveat) Reset() {
	*x = Caveat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Caveat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Caveat) ProtoMessage() {}

func (x *Caveat) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Caveat.ProtoReflect.Descriptor instead.
func (*Caveat) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{6}
}

func (x *Caveat) GetQueries() []*Rule {
	if x != nil {
		return x.Queries
	}
	return nil
}

type Predicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name uint64 `protobuf:"varint,1,opt,name=name,proto3" json:"name,omitempty"`
	Ids  []*ID  `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *Predicate) Reset() {
	*x = Predicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Predicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Predicate) ProtoMessage() {}

func (x *Predicate) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Predicate.ProtoReflect.Descriptor instead.
func (*Predicate) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{7}
}

func (x *Predicate) GetName() uint64 {
	if x != nil {
		return x.Name
	}
	return 0
}

func (x *Predicate) GetIds() []*ID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     ID_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=ID_Kind" json:"kind,omitempty"`
	Symbol   uint64  `protobuf:"varint,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Variable uint32  `protobuf:"varint,3,opt,name=variable,proto3" json:"variable,omitempty"`
	Integer  int64   `protobuf:"varint,4,opt,name=integer,proto3" json:"integer,omitempty"`
	Str      string  `protobuf:"bytes,5,opt,name=str,proto3" json:"str,omitempty"`
	Date     uint64  `protobuf:"varint,6,opt,name=date,proto3" json:"date,omitempty"`
	Bytes    []byte  `protobuf:"bytes,7,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Set      []*ID   `protobuf:"bytes,8,rep,name=set,proto3" json:"set,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{8}
}

func (x *ID) GetKind() ID_Kind {
	if x != nil {
		return x.Kind
	}
	return ID_SYMBOL
}

func (x *ID) GetSymbol() uint64 {
	if x != nil {
		return x.Symbol
	}
	return 0
}

func (x *ID) GetVariable() uint32 {
	if x != nil {
		return x.Variable
	}
	return 0
}

func (x *ID) GetInteger() int64 {
	if x != nil {
		return x.Integer
	}
	return 0
}

func (x *ID) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *ID) GetDate() uint64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ID) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *ID) GetSet() []*ID {
	if x != nil {
		return x.Set
	}
	return nil
}

type Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind   Constraint_Kind   `protobuf:"varint,2,opt,name=kind,proto3,enum=Constraint_Kind" json:"kind,omitempty"`
	Int    *IntConstraint    `protobuf:"bytes,3,opt,name=int,proto3" json:"int,omitempty"`
	Str    *StringConstraint `protobuf:"bytes,4,opt,name=str,proto3" json:"str,omitempty"`
	Date   *DateConstraint   `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	Symbol *SymbolConstraint `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Bytes  *BytesConstraint  `protobuf:"bytes,7,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *Constraint) Reset() {
	*x = Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraint) ProtoMessage() {}

func (x *Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraint.ProtoReflect.Descriptor instead.
func (*Constraint) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{9}
}

func (x *Constraint) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Constraint) GetKind() Constraint_Kind {
	if x != nil {
		return x.Kind
	}
	return Constraint_INT
}

func (x *Constraint) GetInt() *IntConstraint {
	if x != nil {
		return x.Int
	}
	return nil
}

func (x *Constraint) GetStr() *StringConstraint {
	if x != nil {
		return x.Str
	}
	return nil
}

func (x *Constraint) GetDate() *DateConstraint {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Constraint) GetSymbol() *SymbolConstraint {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *Constraint) GetBytes() *BytesConstraint {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type IntConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind          IntConstraint_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=IntConstraint_Kind" json:"kind,omitempty"`
	Lower         int64              `protobuf:"varint,2,opt,name=lower,proto3" json:"lower,omitempty"`
	Larger        int64              `protobuf:"varint,3,opt,name=larger,proto3" json:"larger,omitempty"`
	LowerOrEqual  int64              `protobuf:"varint,4,opt,name=lower_or_equal,json=lowerOrEqual,proto3" json:"lower_or_equal,omitempty"`
	LargerOrEqual int64              `protobuf:"varint,5,opt,name=larger_or_equal,json=largerOrEqual,proto3" json:"larger_or_equal,omitempty"`
	Equal         int64              `protobuf:"varint,6,opt,name=equal,proto3" json:"equal,omitempty"`
	InSet         []int64            `protobuf:"varint,7,rep,packed,name=in_set,json=inSet,proto3" json:"in_set,omitempty"`
	NotInSet      []int64            `protobuf:"varint,8,rep,packed,name=not_in_set,json=notInSet,proto3" json:"not_in_set,omitempty"`
}

func (x *IntConstraint) Reset() {
	*x = IntConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntConstraint) ProtoMessage() {}

func (x *IntConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntConstraint.ProtoReflect.Descriptor instead.
func (*IntConstraint) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{10}
}

func (x *IntConstraint) GetKind() IntConstraint_Kind {
	if x != nil {
		return x.Kind
	}
	return IntConstraint_LOWER
}

func (x *IntConstraint) GetLower() int64 {
	if x != nil {
		return x.Lower
	}
	return 0
}

func (x *IntConstraint) GetLarger() int64 {
	if x != nil {
		return x.Larger
	}
	return 0
}

func (x *IntConstraint) GetLowerOrEqual() int64 {
	if x != nil {
		return x.LowerOrEqual
	}
	return 0
}

func (x *IntConstraint) GetLargerOrEqual() int64 {
	if x != nil {
		return x.LargerOrEqual
	}
	return 0
}

func (x *IntConstraint) GetEqual() int64 {
	if x != nil {
		return x.Equal
	}
	return 0
}

func (x *IntConstraint) GetInSet() []int64 {
	if x != nil {
		return x.InSet
	}
	return nil
}

func (x *IntConstraint) GetNotInSet() []int64 {
	if x != nil {
		return x.NotInSet
	}
	return nil
}

type StringConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     StringConstraint_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=StringConstraint_Kind" json:"kind,omitempty"`
	Prefix   string                `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix   string                `protobuf:"bytes,3,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Equal    string                `protobuf:"bytes,4,opt,name=equal,proto3" json:"equal,omitempty"`
	InSet    []string              `protobuf:"bytes,5,rep,name=in_set,json=inSet,proto3" json:"in_set,omitempty"`
	NotInSet []string              `protobuf:"bytes,6,rep,name=not_in_set,json=notInSet,proto3" json:"not_in_set,omitempty"`
	Regex    string                `protobuf:"bytes,7,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (x *StringConstraint) Reset() {
	*x = StringConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringConstraint) ProtoMessage() {}

func (x *StringConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringConstraint.ProtoReflect.Descriptor instead.
func (*StringConstraint) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{11}
}

func (x *StringConstraint) GetKind() StringConstraint_Kind {
	if x != nil {
		return x.Kind
	}
	return StringConstraint_PREFIX
}

func (x *StringConstraint) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *StringConstraint) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *StringConstraint) GetEqual() string {
	if x != nil {
		return x.Equal
	}
	return ""
}

func (x *StringConstraint) GetInSet() []string {
	if x != nil {
		return x.InSet
	}
	return nil
}

func (x *StringConstraint) GetNotInSet() []string {
	if x != nil {
		return x.NotInSet
	}
	return nil
}

func (x *StringConstraint) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

type DateConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind   DateConstraint_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=DateConstraint_Kind" json:"kind,omitempty"`
	Before uint64              `protobuf:"varint,2,opt,name=before,proto3" json:"before,omitempty"`
	After  uint64              `protobuf:"varint,3,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *DateConstraint) Reset() {
	*x = DateConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateConstraint) ProtoMessage() {}

func (x *DateConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateConstraint.ProtoReflect.Descriptor instead.
func (*DateConstraint) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{12}
}

func (x *DateConstraint) GetKind() DateConstraint_Kind {
	if x != nil {
		return x.Kind
	}
	return DateConstraint_BEFORE
}

func (x *DateConstraint) GetBefore() uint64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *DateConstraint) GetAfter() uint64 {
	if x != nil {
		return x.After
	}
	return 0
}

type SymbolConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     SymbolConstraint_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=SymbolConstraint_Kind" json:"kind,omitempty"`
	InSet    []uint64              `protobuf:"varint,2,rep,packed,name=in_set,json=inSet,proto3" json:"in_set,omitempty"`
	NotInSet []uint64              `protobuf:"varint,3,rep,packed,name=not_in_set,json=notInSet,proto3" json:"not_in_set,omitempty"`
}

func (x *SymbolConstraint) Reset() {
	*x = SymbolConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolConstraint) ProtoMessage() {}

func (x *SymbolConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolConstraint.ProtoReflect.Descriptor instead.
func (*SymbolConstraint) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{13}
}

func (x *SymbolConstraint) GetKind() SymbolConstraint_Kind {
	if x != nil {
		return x.Kind
	}
	return SymbolConstraint_IN
}

func (x *SymbolConstraint) GetInSet() []uint64 {
	if x != nil {
		return x.InSet
	}
	return nil
}

func (x *SymbolConstraint) GetNotInSet() []uint64 {
	if x != nil {
		return x.NotInSet
	}
	return nil
}

type BytesConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     BytesConstraint_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=BytesConstraint_Kind" json:"kind,omitempty"`
	Equal    []byte               `protobuf:"bytes,2,opt,name=equal,proto3" json:"equal,omitempty"`
	InSet    [][]byte             `protobuf:"bytes,3,rep,name=in_set,json=inSet,proto3" json:"in_set,omitempty"`
	NotInSet [][]byte             `protobuf:"bytes,4,rep,name=not_in_set,json=notInSet,proto3" json:"not_in_set,omitempty"`
}

func (x *BytesConstraint) Reset() {
	*x = BytesConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesConstraint) ProtoMessage() {}

func (x *BytesConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesConstraint.ProtoReflect.Descriptor instead.
func (*BytesConstraint) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{14}
}

func (x *BytesConstraint) GetKind() BytesConstraint_Kind {
	if x != nil {
		return x.Kind
	}
	return BytesConstraint_EQUAL
}

func (x *BytesConstraint) GetEqual() []byte {
	if x != nil {
		return x.Equal
	}
	return nil
}

func (x *BytesConstraint) GetInSet() [][]byte {
	if x != nil {
		return x.InSet
	}
	return nil
}

func (x *BytesConstraint) GetNotInSet() [][]byte {
	if x != nil {
		return x.NotInSet
	}
	return nil
}

var File_biscuit_proto protoreflect.FileDescriptor

var file_biscuit_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x7d, 0x0a, 0x07, 0x42, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x63,
	0x0a, 0x0d, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x42, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x7a, 0x22, 0xc8,
	0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x52, 0x05,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x61, 0x76, 0x65, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x61, 0x76, 0x65, 0x61, 0x74, 0x52, 0x07, 0x63, 0x61,
	0x76, 0x65, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x04, 0x46, 0x61, 0x63,
	0x74, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x75, 0x0a, 0x04, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0x29, 0x0a, 0x06, 0x43, 0x61, 0x76, 0x65, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x36, 0x0a,
	0x09, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x03, 0x2e, 0x49, 0x44,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x49, 0x44, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x03, 0x2e, 0x49, 0x44, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x54, 0x0a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x54,
	0x52, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10,
	0x06, 0x22, 0xc8, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x23, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x26, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x05, 0x22, 0xee, 0x02, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x49,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f,
	0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x69,
	0x6e, 0x53, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6e, 0x6f,
	0x74, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x22, 0x65, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x52,
	0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f,
	0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x52,
	0x47, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x06, 0x22, 0x99, 0x02,
	0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6e,
	0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x22,
	0x48, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x05, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x22, 0x1d, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6e,
	0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x08, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x22, 0x1a, 0x0a, 0x04, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x10, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x53, 0x65,
	0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x22,
	0x25, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f,
	0x54, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_biscuit_proto_rawDescOnce sync.Once
	file_biscuit_proto_rawDescData = file_biscuit_proto_rawDesc
)

func file_biscuit_proto_rawDescGZIP() []byte {
	file_biscuit_proto_rawDescOnce.Do(func() {
		file_biscuit_proto_rawDescData = protoimpl.X.CompressGZIP(file_biscuit_proto_rawDescData)
	})
	return file_biscuit_proto_rawDescData
}

var file_biscuit_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_biscuit_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_biscuit_proto_goTypes = []interface{}{
	(ID_Kind)(0),               // 0: ID.Kind
	(Constraint_Kind)(0),       // 1: Constraint.Kind
	(IntConstraint_Kind)(0),    // 2: IntConstraint.Kind
	(StringConstraint_Kind)(0), // 3: StringConstraint.Kind
	(DateConstraint_Kind)(0),   // 4: DateConstraint.Kind
	(SymbolConstraint_Kind)(0), // 5: SymbolConstraint.Kind
	(BytesConstraint_Kind)(0),  // 6: BytesConstraint.Kind
	(*Biscuit)(nil),            // 7: Biscuit
	(*SealedBiscuit)(nil),      // 8: SealedBiscuit
	(*Signature)(nil),          // 9: Signature
	(*Block)(nil),              // 10: Block
	(*Fact)(nil),               // 11: Fact
	(*Rule)(nil),               // 12: Rule
	(*Caveat)(nil),             // 13: Caveat
	(*Predicate)(nil),          // 14: Predicate
	(*ID)(nil),                 // 15: ID
	(*Constraint)(nil),         // 16: Constraint
	(*IntConstraint)(nil),      // 17: IntConstraint
	(*StringConstraint)(nil),   // 18: StringConstraint
	(*DateConstraint)(nil),     // 19: DateConstraint
	(*SymbolConstraint)(nil),   // 20: SymbolConstraint
	(*BytesConstraint)(nil),    // 21: BytesConstraint
}
var file_biscuit_proto_depIdxs = []int32{
	9,  // 0: Biscuit.signature:type_name -> Signature
	11, // 1: Block.facts:type_name -> Fact
	12, // 2: Block.rules:type_name -> Rule
	13, // 3: Block.caveats:type_name -> Caveat
	14, // 4: Fact.predicate:type_name -> Predicate
	14, // 5: Rule.head:type_name -> Predicate
	14, // 6: Rule.body:type_name -> Predicate
	16, // 7: Rule.constraints:type_name -> Constraint
	12, // 8: Caveat.queries:type_name -> Rule
	15, // 9: Predicate.ids:type_name -> ID
	0,  // 10: ID.kind:type_name -> ID.Kind
	15, // 11: ID.set:type_name -> ID
	1,  // 12: Constraint.kind:type_name -> Constraint.Kind
	17, // 13: Constraint.int:type_name -> IntConstraint
	18, // 14: Constraint.str:type_name -> StringConstraint
	19, // 15: Constraint.date:type_name -> DateConstraint
	20, // 16: Constraint.symbol:type_name -> SymbolConstraint
	21, // 17: Constraint.bytes:type_name -> BytesConstraint
	2,  // 18: IntConstraint.kind:type_name -> IntConstraint.Kind
	3,  // 19: StringConstraint.kind:type_name -> StringConstraint.Kind
	4,  // 20: DateConstraint.kind:type_name -> DateConstraint.Kind
	5,  // 21: SymbolConstraint.kind:type_name -> SymbolConstraint.Kind
	6,  // 22: BytesConstraint.kind:type_name -> BytesConstraint.Kind
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_biscuit_proto_init() }
func file_biscuit_proto_init() {
	if File_biscuit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biscuit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Biscuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealedBiscuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Caveat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Predicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biscuit_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_biscuit_proto_goTypes,
		DependencyIndexes: file_biscuit_proto_depIdxs,
		EnumInfos:         file_biscuit_proto_enumTypes,
		MessageInfos:      file_biscuit_proto_msgTypes,
	}.Build()
	File_biscuit_proto = out.File
	file_biscuit_proto_rawDesc = nil
	file_biscuit_proto_goTypes = nil
	file_biscuit_proto_depIdxs = nil
}
