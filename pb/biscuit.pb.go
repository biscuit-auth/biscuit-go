// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: biscuit.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PublicKey_Algorithm int32

const (
	PublicKey_Ed25519 PublicKey_Algorithm = 0
)

// Enum value maps for PublicKey_Algorithm.
var (
	PublicKey_Algorithm_name = map[int32]string{
		0: "Ed25519",
	}
	PublicKey_Algorithm_value = map[string]int32{
		"Ed25519": 0,
	}
)

func (x PublicKey_Algorithm) Enum() *PublicKey_Algorithm {
	p := new(PublicKey_Algorithm)
	*p = x
	return p
}

func (x PublicKey_Algorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicKey_Algorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[0].Descriptor()
}

func (PublicKey_Algorithm) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[0]
}

func (x PublicKey_Algorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PublicKey_Algorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PublicKey_Algorithm(num)
	return nil
}

// Deprecated: Use PublicKey_Algorithm.Descriptor instead.
func (PublicKey_Algorithm) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{3, 0}
}

type Scope_ScopeType int32

const (
	Scope_Authority Scope_ScopeType = 0
	Scope_Previous  Scope_ScopeType = 1
)

// Enum value maps for Scope_ScopeType.
var (
	Scope_ScopeType_name = map[int32]string{
		0: "Authority",
		1: "Previous",
	}
	Scope_ScopeType_value = map[string]int32{
		"Authority": 0,
		"Previous":  1,
	}
)

func (x Scope_ScopeType) Enum() *Scope_ScopeType {
	p := new(Scope_ScopeType)
	*p = x
	return p
}

func (x Scope_ScopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scope_ScopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[1].Descriptor()
}

func (Scope_ScopeType) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[1]
}

func (x Scope_ScopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Scope_ScopeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Scope_ScopeType(num)
	return nil
}

// Deprecated: Use Scope_ScopeType.Descriptor instead.
func (Scope_ScopeType) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{6, 0}
}

type CheckV2_Kind int32

const (
	CheckV2_One CheckV2_Kind = 0
	CheckV2_All CheckV2_Kind = 1
)

// Enum value maps for CheckV2_Kind.
var (
	CheckV2_Kind_name = map[int32]string{
		0: "One",
		1: "All",
	}
	CheckV2_Kind_value = map[string]int32{
		"One": 0,
		"All": 1,
	}
)

func (x CheckV2_Kind) Enum() *CheckV2_Kind {
	p := new(CheckV2_Kind)
	*p = x
	return p
}

func (x CheckV2_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckV2_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[2].Descriptor()
}

func (CheckV2_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[2]
}

func (x CheckV2_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CheckV2_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CheckV2_Kind(num)
	return nil
}

// Deprecated: Use CheckV2_Kind.Descriptor instead.
func (CheckV2_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{9, 0}
}

type OpUnary_Kind int32

const (
	OpUnary_Negate OpUnary_Kind = 0
	OpUnary_Parens OpUnary_Kind = 1
	OpUnary_Length OpUnary_Kind = 2
)

// Enum value maps for OpUnary_Kind.
var (
	OpUnary_Kind_name = map[int32]string{
		0: "Negate",
		1: "Parens",
		2: "Length",
	}
	OpUnary_Kind_value = map[string]int32{
		"Negate": 0,
		"Parens": 1,
		"Length": 2,
	}
)

func (x OpUnary_Kind) Enum() *OpUnary_Kind {
	p := new(OpUnary_Kind)
	*p = x
	return p
}

func (x OpUnary_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpUnary_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[3].Descriptor()
}

func (OpUnary_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[3]
}

func (x OpUnary_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpUnary_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpUnary_Kind(num)
	return nil
}

// Deprecated: Use OpUnary_Kind.Descriptor instead.
func (OpUnary_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{15, 0}
}

type OpBinary_Kind int32

const (
	OpBinary_LessThan       OpBinary_Kind = 0
	OpBinary_GreaterThan    OpBinary_Kind = 1
	OpBinary_LessOrEqual    OpBinary_Kind = 2
	OpBinary_GreaterOrEqual OpBinary_Kind = 3
	OpBinary_Equal          OpBinary_Kind = 4
	OpBinary_Contains       OpBinary_Kind = 5
	OpBinary_Prefix         OpBinary_Kind = 6
	OpBinary_Suffix         OpBinary_Kind = 7
	OpBinary_Regex          OpBinary_Kind = 8
	OpBinary_Add            OpBinary_Kind = 9
	OpBinary_Sub            OpBinary_Kind = 10
	OpBinary_Mul            OpBinary_Kind = 11
	OpBinary_Div            OpBinary_Kind = 12
	OpBinary_And            OpBinary_Kind = 13
	OpBinary_Or             OpBinary_Kind = 14
	OpBinary_Intersection   OpBinary_Kind = 15
	OpBinary_Union          OpBinary_Kind = 16
	OpBinary_BitwiseAnd     OpBinary_Kind = 17
	OpBinary_BitwiseOr      OpBinary_Kind = 18
	OpBinary_BitwiseXor     OpBinary_Kind = 19
	OpBinary_NotEqual       OpBinary_Kind = 20
)

// Enum value maps for OpBinary_Kind.
var (
	OpBinary_Kind_name = map[int32]string{
		0:  "LessThan",
		1:  "GreaterThan",
		2:  "LessOrEqual",
		3:  "GreaterOrEqual",
		4:  "Equal",
		5:  "Contains",
		6:  "Prefix",
		7:  "Suffix",
		8:  "Regex",
		9:  "Add",
		10: "Sub",
		11: "Mul",
		12: "Div",
		13: "And",
		14: "Or",
		15: "Intersection",
		16: "Union",
		17: "BitwiseAnd",
		18: "BitwiseOr",
		19: "BitwiseXor",
		20: "NotEqual",
	}
	OpBinary_Kind_value = map[string]int32{
		"LessThan":       0,
		"GreaterThan":    1,
		"LessOrEqual":    2,
		"GreaterOrEqual": 3,
		"Equal":          4,
		"Contains":       5,
		"Prefix":         6,
		"Suffix":         7,
		"Regex":          8,
		"Add":            9,
		"Sub":            10,
		"Mul":            11,
		"Div":            12,
		"And":            13,
		"Or":             14,
		"Intersection":   15,
		"Union":          16,
		"BitwiseAnd":     17,
		"BitwiseOr":      18,
		"BitwiseXor":     19,
		"NotEqual":       20,
	}
)

func (x OpBinary_Kind) Enum() *OpBinary_Kind {
	p := new(OpBinary_Kind)
	*p = x
	return p
}

func (x OpBinary_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpBinary_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[4].Descriptor()
}

func (OpBinary_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[4]
}

func (x OpBinary_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpBinary_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpBinary_Kind(num)
	return nil
}

// Deprecated: Use OpBinary_Kind.Descriptor instead.
func (OpBinary_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{16, 0}
}

type Policy_Kind int32

const (
	Policy_Allow Policy_Kind = 0
	Policy_Deny  Policy_Kind = 1
)

// Enum value maps for Policy_Kind.
var (
	Policy_Kind_name = map[int32]string{
		0: "Allow",
		1: "Deny",
	}
	Policy_Kind_value = map[string]int32{
		"Allow": 0,
		"Deny":  1,
	}
)

func (x Policy_Kind) Enum() *Policy_Kind {
	p := new(Policy_Kind)
	*p = x
	return p
}

func (x Policy_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[5].Descriptor()
}

func (Policy_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[5]
}

func (x Policy_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Policy_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Policy_Kind(num)
	return nil
}

// Deprecated: Use Policy_Kind.Descriptor instead.
func (Policy_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{17, 0}
}

type Biscuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootKeyId *uint32        `protobuf:"varint,1,opt,name=rootKeyId" json:"rootKeyId,omitempty"`
	Authority *SignedBlock   `protobuf:"bytes,2,req,name=authority" json:"authority,omitempty"`
	Blocks    []*SignedBlock `protobuf:"bytes,3,rep,name=blocks" json:"blocks,omitempty"`
	Proof     *Proof         `protobuf:"bytes,4,req,name=proof" json:"proof,omitempty"`
}

func (x *Biscuit) Reset() {
	*x = Biscuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Biscuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Biscuit) ProtoMessage() {}

func (x *Biscuit) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Biscuit.ProtoReflect.Descriptor instead.
func (*Biscuit) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{0}
}

func (x *Biscuit) GetRootKeyId() uint32 {
	if x != nil && x.RootKeyId != nil {
		return *x.RootKeyId
	}
	return 0
}

func (x *Biscuit) GetAuthority() *SignedBlock {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *Biscuit) GetBlocks() []*SignedBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *Biscuit) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type SignedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block             []byte             `protobuf:"bytes,1,req,name=block" json:"block,omitempty"`
	NextKey           *PublicKey         `protobuf:"bytes,2,req,name=nextKey" json:"nextKey,omitempty"`
	Signature         []byte             `protobuf:"bytes,3,req,name=signature" json:"signature,omitempty"`
	ExternalSignature *ExternalSignature `protobuf:"bytes,4,opt,name=externalSignature" json:"externalSignature,omitempty"`
}

func (x *SignedBlock) Reset() {
	*x = SignedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedBlock) ProtoMessage() {}

func (x *SignedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedBlock.ProtoReflect.Descriptor instead.
func (*SignedBlock) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{1}
}

func (x *SignedBlock) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *SignedBlock) GetNextKey() *PublicKey {
	if x != nil {
		return x.NextKey
	}
	return nil
}

func (x *SignedBlock) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedBlock) GetExternalSignature() *ExternalSignature {
	if x != nil {
		return x.ExternalSignature
	}
	return nil
}

type ExternalSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte     `protobuf:"bytes,1,req,name=signature" json:"signature,omitempty"`
	PublicKey *PublicKey `protobuf:"bytes,2,req,name=publicKey" json:"publicKey,omitempty"`
}

func (x *ExternalSignature) Reset() {
	*x = ExternalSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalSignature) ProtoMessage() {}

func (x *ExternalSignature) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalSignature.ProtoReflect.Descriptor instead.
func (*ExternalSignature) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ExternalSignature) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm *PublicKey_Algorithm `protobuf:"varint,1,req,name=algorithm,enum=biscuit.format.schema.PublicKey_Algorithm" json:"algorithm,omitempty"`
	Key       []byte               `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{3}
}

func (x *PublicKey) GetAlgorithm() PublicKey_Algorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return PublicKey_Ed25519
}

func (x *PublicKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*Proof_NextSecret
	//	*Proof_FinalSignature
	Content isProof_Content `protobuf_oneof:"Content"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{4}
}

func (m *Proof) GetContent() isProof_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Proof) GetNextSecret() []byte {
	if x, ok := x.GetContent().(*Proof_NextSecret); ok {
		return x.NextSecret
	}
	return nil
}

func (x *Proof) GetFinalSignature() []byte {
	if x, ok := x.GetContent().(*Proof_FinalSignature); ok {
		return x.FinalSignature
	}
	return nil
}

type isProof_Content interface {
	isProof_Content()
}

type Proof_NextSecret struct {
	NextSecret []byte `protobuf:"bytes,1,opt,name=nextSecret,oneof"`
}

type Proof_FinalSignature struct {
	FinalSignature []byte `protobuf:"bytes,2,opt,name=finalSignature,oneof"`
}

func (*Proof_NextSecret) isProof_Content() {}

func (*Proof_FinalSignature) isProof_Content() {}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols    []string     `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	Context    *string      `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
	Version    *uint32      `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	FactsV2    []*FactV2    `protobuf:"bytes,4,rep,name=facts_v2,json=factsV2" json:"facts_v2,omitempty"`
	RulesV2    []*RuleV2    `protobuf:"bytes,5,rep,name=rules_v2,json=rulesV2" json:"rules_v2,omitempty"`
	ChecksV2   []*CheckV2   `protobuf:"bytes,6,rep,name=checks_v2,json=checksV2" json:"checks_v2,omitempty"`
	Scope      []*Scope     `protobuf:"bytes,7,rep,name=scope" json:"scope,omitempty"`
	PublicKeys []*PublicKey `protobuf:"bytes,8,rep,name=publicKeys" json:"publicKeys,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{5}
}

func (x *Block) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *Block) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

func (x *Block) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Block) GetFactsV2() []*FactV2 {
	if x != nil {
		return x.FactsV2
	}
	return nil
}

func (x *Block) GetRulesV2() []*RuleV2 {
	if x != nil {
		return x.RulesV2
	}
	return nil
}

func (x *Block) GetChecksV2() []*CheckV2 {
	if x != nil {
		return x.ChecksV2
	}
	return nil
}

func (x *Block) GetScope() []*Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Block) GetPublicKeys() []*PublicKey {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*Scope_ScopeType_
	//	*Scope_PublicKey
	Content isScope_Content `protobuf_oneof:"Content"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{6}
}

func (m *Scope) GetContent() isScope_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Scope) GetScopeType() Scope_ScopeType {
	if x, ok := x.GetContent().(*Scope_ScopeType_); ok {
		return x.ScopeType
	}
	return Scope_Authority
}

func (x *Scope) GetPublicKey() int64 {
	if x, ok := x.GetContent().(*Scope_PublicKey); ok {
		return x.PublicKey
	}
	return 0
}

type isScope_Content interface {
	isScope_Content()
}

type Scope_ScopeType_ struct {
	ScopeType Scope_ScopeType `protobuf:"varint,1,opt,name=scopeType,enum=biscuit.format.schema.Scope_ScopeType,oneof"`
}

type Scope_PublicKey struct {
	PublicKey int64 `protobuf:"varint,2,opt,name=publicKey,oneof"`
}

func (*Scope_ScopeType_) isScope_Content() {}

func (*Scope_PublicKey) isScope_Content() {}

type FactV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate *PredicateV2 `protobuf:"bytes,1,req,name=predicate" json:"predicate,omitempty"`
}

func (x *FactV2) Reset() {
	*x = FactV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactV2) ProtoMessage() {}

func (x *FactV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactV2.ProtoReflect.Descriptor instead.
func (*FactV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{7}
}

func (x *FactV2) GetPredicate() *PredicateV2 {
	if x != nil {
		return x.Predicate
	}
	return nil
}

type RuleV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head        *PredicateV2    `protobuf:"bytes,1,req,name=head" json:"head,omitempty"`
	Body        []*PredicateV2  `protobuf:"bytes,2,rep,name=body" json:"body,omitempty"`
	Expressions []*ExpressionV2 `protobuf:"bytes,3,rep,name=expressions" json:"expressions,omitempty"`
	Scope       []*Scope        `protobuf:"bytes,4,rep,name=scope" json:"scope,omitempty"`
}

func (x *RuleV2) Reset() {
	*x = RuleV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleV2) ProtoMessage() {}

func (x *RuleV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleV2.ProtoReflect.Descriptor instead.
func (*RuleV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{8}
}

func (x *RuleV2) GetHead() *PredicateV2 {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RuleV2) GetBody() []*PredicateV2 {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RuleV2) GetExpressions() []*ExpressionV2 {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *RuleV2) GetScope() []*Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type CheckV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*RuleV2     `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
	Kind    *CheckV2_Kind `protobuf:"varint,2,opt,name=kind,enum=biscuit.format.schema.CheckV2_Kind" json:"kind,omitempty"`
}

func (x *CheckV2) Reset() {
	*x = CheckV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckV2) ProtoMessage() {}

func (x *CheckV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckV2.ProtoReflect.Descriptor instead.
func (*CheckV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{9}
}

func (x *CheckV2) GetQueries() []*RuleV2 {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *CheckV2) GetKind() CheckV2_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return CheckV2_One
}

type PredicateV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *uint64   `protobuf:"varint,1,req,name=name" json:"name,omitempty"`
	Terms []*TermV2 `protobuf:"bytes,2,rep,name=terms" json:"terms,omitempty"`
}

func (x *PredicateV2) Reset() {
	*x = PredicateV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredicateV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredicateV2) ProtoMessage() {}

func (x *PredicateV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredicateV2.ProtoReflect.Descriptor instead.
func (*PredicateV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{10}
}

func (x *PredicateV2) GetName() uint64 {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return 0
}

func (x *PredicateV2) GetTerms() []*TermV2 {
	if x != nil {
		return x.Terms
	}
	return nil
}

type TermV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*TermV2_Variable
	//	*TermV2_Integer
	//	*TermV2_String_
	//	*TermV2_Date
	//	*TermV2_Bytes
	//	*TermV2_Bool
	//	*TermV2_Set
	Content isTermV2_Content `protobuf_oneof:"Content"`
}

func (x *TermV2) Reset() {
	*x = TermV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermV2) ProtoMessage() {}

func (x *TermV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermV2.ProtoReflect.Descriptor instead.
func (*TermV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{11}
}

func (m *TermV2) GetContent() isTermV2_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *TermV2) GetVariable() uint32 {
	if x, ok := x.GetContent().(*TermV2_Variable); ok {
		return x.Variable
	}
	return 0
}

func (x *TermV2) GetInteger() int64 {
	if x, ok := x.GetContent().(*TermV2_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *TermV2) GetString_() uint64 {
	if x, ok := x.GetContent().(*TermV2_String_); ok {
		return x.String_
	}
	return 0
}

func (x *TermV2) GetDate() uint64 {
	if x, ok := x.GetContent().(*TermV2_Date); ok {
		return x.Date
	}
	return 0
}

func (x *TermV2) GetBytes() []byte {
	if x, ok := x.GetContent().(*TermV2_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *TermV2) GetBool() bool {
	if x, ok := x.GetContent().(*TermV2_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *TermV2) GetSet() *TermSet {
	if x, ok := x.GetContent().(*TermV2_Set); ok {
		return x.Set
	}
	return nil
}

type isTermV2_Content interface {
	isTermV2_Content()
}

type TermV2_Variable struct {
	Variable uint32 `protobuf:"varint,1,opt,name=variable,oneof"`
}

type TermV2_Integer struct {
	Integer int64 `protobuf:"varint,2,opt,name=integer,oneof"`
}

type TermV2_String_ struct {
	String_ uint64 `protobuf:"varint,3,opt,name=string,oneof"`
}

type TermV2_Date struct {
	Date uint64 `protobuf:"varint,4,opt,name=date,oneof"`
}

type TermV2_Bytes struct {
	Bytes []byte `protobuf:"bytes,5,opt,name=bytes,oneof"`
}

type TermV2_Bool struct {
	Bool bool `protobuf:"varint,6,opt,name=bool,oneof"`
}

type TermV2_Set struct {
	Set *TermSet `protobuf:"bytes,7,opt,name=set,oneof"`
}

func (*TermV2_Variable) isTermV2_Content() {}

func (*TermV2_Integer) isTermV2_Content() {}

func (*TermV2_String_) isTermV2_Content() {}

func (*TermV2_Date) isTermV2_Content() {}

func (*TermV2_Bytes) isTermV2_Content() {}

func (*TermV2_Bool) isTermV2_Content() {}

func (*TermV2_Set) isTermV2_Content() {}

type TermSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set []*TermV2 `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
}

func (x *TermSet) Reset() {
	*x = TermSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermSet) ProtoMessage() {}

func (x *TermSet) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermSet.ProtoReflect.Descriptor instead.
func (*TermSet) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{12}
}

func (x *TermSet) GetSet() []*TermV2 {
	if x != nil {
		return x.Set
	}
	return nil
}

type ExpressionV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ops []*Op `protobuf:"bytes,1,rep,name=ops" json:"ops,omitempty"`
}

func (x *ExpressionV2) Reset() {
	*x = ExpressionV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressionV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionV2) ProtoMessage() {}

func (x *ExpressionV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionV2.ProtoReflect.Descriptor instead.
func (*ExpressionV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{13}
}

func (x *ExpressionV2) GetOps() []*Op {
	if x != nil {
		return x.Ops
	}
	return nil
}

type Op struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*Op_Value
	//	*Op_Unary
	//	*Op_Binary
	Content isOp_Content `protobuf_oneof:"Content"`
}

func (x *Op) Reset() {
	*x = Op{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Op) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Op) ProtoMessage() {}

func (x *Op) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Op.ProtoReflect.Descriptor instead.
func (*Op) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{14}
}

func (m *Op) GetContent() isOp_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Op) GetValue() *TermV2 {
	if x, ok := x.GetContent().(*Op_Value); ok {
		return x.Value
	}
	return nil
}

func (x *Op) GetUnary() *OpUnary {
	if x, ok := x.GetContent().(*Op_Unary); ok {
		return x.Unary
	}
	return nil
}

func (x *Op) GetBinary() *OpBinary {
	if x, ok := x.GetContent().(*Op_Binary); ok {
		return x.Binary
	}
	return nil
}

type isOp_Content interface {
	isOp_Content()
}

type Op_Value struct {
	Value *TermV2 `protobuf:"bytes,1,opt,name=value,oneof"`
}

type Op_Unary struct {
	Unary *OpUnary `protobuf:"bytes,2,opt,name=unary,oneof"`
}

type Op_Binary struct {
	Binary *OpBinary `protobuf:"bytes,3,opt,name=Binary,oneof"`
}

func (*Op_Value) isOp_Content() {}

func (*Op_Unary) isOp_Content() {}

func (*Op_Binary) isOp_Content() {}

type OpUnary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *OpUnary_Kind `protobuf:"varint,1,req,name=kind,enum=biscuit.format.schema.OpUnary_Kind" json:"kind,omitempty"`
}

func (x *OpUnary) Reset() {
	*x = OpUnary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpUnary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpUnary) ProtoMessage() {}

func (x *OpUnary) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpUnary.ProtoReflect.Descriptor instead.
func (*OpUnary) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{15}
}

func (x *OpUnary) GetKind() OpUnary_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return OpUnary_Negate
}

type OpBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *OpBinary_Kind `protobuf:"varint,1,req,name=kind,enum=biscuit.format.schema.OpBinary_Kind" json:"kind,omitempty"`
}

func (x *OpBinary) Reset() {
	*x = OpBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpBinary) ProtoMessage() {}

func (x *OpBinary) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpBinary.ProtoReflect.Descriptor instead.
func (*OpBinary) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{16}
}

func (x *OpBinary) GetKind() OpBinary_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return OpBinary_LessThan
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*RuleV2    `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
	Kind    *Policy_Kind `protobuf:"varint,2,req,name=kind,enum=biscuit.format.schema.Policy_Kind" json:"kind,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{17}
}

func (x *Policy) GetQueries() []*RuleV2 {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *Policy) GetKind() Policy_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Policy_Allow
}

type AuthorizerPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols  []string   `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	Version  *uint32    `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Facts    []*FactV2  `protobuf:"bytes,3,rep,name=facts" json:"facts,omitempty"`
	Rules    []*RuleV2  `protobuf:"bytes,4,rep,name=rules" json:"rules,omitempty"`
	Checks   []*CheckV2 `protobuf:"bytes,5,rep,name=checks" json:"checks,omitempty"`
	Policies []*Policy  `protobuf:"bytes,6,rep,name=policies" json:"policies,omitempty"`
}

func (x *AuthorizerPolicies) Reset() {
	*x = AuthorizerPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizerPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizerPolicies) ProtoMessage() {}

func (x *AuthorizerPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizerPolicies.ProtoReflect.Descriptor instead.
func (*AuthorizerPolicies) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{18}
}

func (x *AuthorizerPolicies) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *AuthorizerPolicies) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *AuthorizerPolicies) GetFacts() []*FactV2 {
	if x != nil {
		return x.Facts
	}
	return nil
}

func (x *AuthorizerPolicies) GetRules() []*RuleV2 {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *AuthorizerPolicies) GetChecks() []*CheckV2 {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *AuthorizerPolicies) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type ThirdPartyBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousKey *PublicKey   `protobuf:"bytes,1,req,name=previousKey" json:"previousKey,omitempty"`
	PublicKeys  []*PublicKey `protobuf:"bytes,2,rep,name=publicKeys" json:"publicKeys,omitempty"`
}

func (x *ThirdPartyBlockRequest) Reset() {
	*x = ThirdPartyBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdPartyBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyBlockRequest) ProtoMessage() {}

func (x *ThirdPartyBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyBlockRequest.ProtoReflect.Descriptor instead.
func (*ThirdPartyBlockRequest) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{19}
}

func (x *ThirdPartyBlockRequest) GetPreviousKey() *PublicKey {
	if x != nil {
		return x.PreviousKey
	}
	return nil
}

func (x *ThirdPartyBlockRequest) GetPublicKeys() []*PublicKey {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

type ThirdPartyBlockContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload           []byte             `protobuf:"bytes,1,req,name=payload" json:"payload,omitempty"`
	ExternalSignature *ExternalSignature `protobuf:"bytes,2,req,name=externalSignature" json:"externalSignature,omitempty"`
}

func (x *ThirdPartyBlockContents) Reset() {
	*x = ThirdPartyBlockContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdPartyBlockContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyBlockContents) ProtoMessage() {}

func (x *ThirdPartyBlockContents) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyBlockContents.ProtoReflect.Descriptor instead.
func (*ThirdPartyBlockContents) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{20}
}

func (x *ThirdPartyBlockContents) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ThirdPartyBlockContents) GetExternalSignature() *ExternalSignature {
	if x != nil {
		return x.ExternalSignature
	}
	return nil
}

type AuthorizerSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits        *RunLimits       `protobuf:"bytes,1,req,name=limits" json:"limits,omitempty"`
	ExecutionTime *uint64          `protobuf:"varint,2,req,name=executionTime" json:"executionTime,omitempty"`
	World         *AuthorizerWorld `protobuf:"bytes,3,req,name=world" json:"world,omitempty"`
}

func (x *AuthorizerSnapshot) Reset() {
	*x = AuthorizerSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizerSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizerSnapshot) ProtoMessage() {}

func (x *AuthorizerSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizerSnapshot.ProtoReflect.Descriptor instead.
func (*AuthorizerSnapshot) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{21}
}

func (x *AuthorizerSnapshot) GetLimits() *RunLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *AuthorizerSnapshot) GetExecutionTime() uint64 {
	if x != nil && x.ExecutionTime != nil {
		return *x.ExecutionTime
	}
	return 0
}

func (x *AuthorizerSnapshot) GetWorld() *AuthorizerWorld {
	if x != nil {
		return x.World
	}
	return nil
}

type RunLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxFacts      *uint64 `protobuf:"varint,1,req,name=maxFacts" json:"maxFacts,omitempty"`
	MaxIterations *uint64 `protobuf:"varint,2,req,name=maxIterations" json:"maxIterations,omitempty"`
	MaxTime       *uint64 `protobuf:"varint,3,req,name=maxTime" json:"maxTime,omitempty"`
}

func (x *RunLimits) Reset() {
	*x = RunLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLimits) ProtoMessage() {}

func (x *RunLimits) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLimits.ProtoReflect.Descriptor instead.
func (*RunLimits) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{22}
}

func (x *RunLimits) GetMaxFacts() uint64 {
	if x != nil && x.MaxFacts != nil {
		return *x.MaxFacts
	}
	return 0
}

func (x *RunLimits) GetMaxIterations() uint64 {
	if x != nil && x.MaxIterations != nil {
		return *x.MaxIterations
	}
	return 0
}

func (x *RunLimits) GetMaxTime() uint64 {
	if x != nil && x.MaxTime != nil {
		return *x.MaxTime
	}
	return 0
}

type AuthorizerWorld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            *uint32           `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Symbols            []string          `protobuf:"bytes,2,rep,name=symbols" json:"symbols,omitempty"`
	PublicKeys         []*PublicKey      `protobuf:"bytes,3,rep,name=publicKeys" json:"publicKeys,omitempty"`
	Blocks             []*SnapshotBlock  `protobuf:"bytes,4,rep,name=blocks" json:"blocks,omitempty"`
	AuthorizerBlock    *SnapshotBlock    `protobuf:"bytes,5,req,name=authorizerBlock" json:"authorizerBlock,omitempty"`
	AuthorizerPolicies []*Policy         `protobuf:"bytes,6,rep,name=authorizerPolicies" json:"authorizerPolicies,omitempty"`
	GeneratedFacts     []*GeneratedFacts `protobuf:"bytes,7,rep,name=generatedFacts" json:"generatedFacts,omitempty"`
	Iterations         *uint64           `protobuf:"varint,8,req,name=iterations" json:"iterations,omitempty"`
}

func (x *AuthorizerWorld) Reset() {
	*x = AuthorizerWorld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizerWorld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizerWorld) ProtoMessage() {}

func (x *AuthorizerWorld) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizerWorld.ProtoReflect.Descriptor instead.
func (*AuthorizerWorld) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{23}
}

func (x *AuthorizerWorld) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *AuthorizerWorld) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *AuthorizerWorld) GetPublicKeys() []*PublicKey {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *AuthorizerWorld) GetBlocks() []*SnapshotBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *AuthorizerWorld) GetAuthorizerBlock() *SnapshotBlock {
	if x != nil {
		return x.AuthorizerBlock
	}
	return nil
}

func (x *AuthorizerWorld) GetAuthorizerPolicies() []*Policy {
	if x != nil {
		return x.AuthorizerPolicies
	}
	return nil
}

func (x *AuthorizerWorld) GetGeneratedFacts() []*GeneratedFacts {
	if x != nil {
		return x.GeneratedFacts
	}
	return nil
}

func (x *AuthorizerWorld) GetIterations() uint64 {
	if x != nil && x.Iterations != nil {
		return *x.Iterations
	}
	return 0
}

type Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*Origin_Authorizer
	//	*Origin_Origin
	Content isOrigin_Content `protobuf_oneof:"Content"`
}

func (x *Origin) Reset() {
	*x = Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Origin) ProtoMessage() {}

func (x *Origin) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Origin.ProtoReflect.Descriptor instead.
func (*Origin) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{24}
}

func (m *Origin) GetContent() isOrigin_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Origin) GetAuthorizer() *Empty {
	if x, ok := x.GetContent().(*Origin_Authorizer); ok {
		return x.Authorizer
	}
	return nil
}

func (x *Origin) GetOrigin() uint32 {
	if x, ok := x.GetContent().(*Origin_Origin); ok {
		return x.Origin
	}
	return 0
}

type isOrigin_Content interface {
	isOrigin_Content()
}

type Origin_Authorizer struct {
	Authorizer *Empty `protobuf:"bytes,1,opt,name=authorizer,oneof"`
}

type Origin_Origin struct {
	Origin uint32 `protobuf:"varint,2,opt,name=origin,oneof"`
}

func (*Origin_Authorizer) isOrigin_Content() {}

func (*Origin_Origin) isOrigin_Content() {}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{25}
}

type GeneratedFacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origins []*Origin `protobuf:"bytes,1,rep,name=origins" json:"origins,omitempty"`
	Facts   []*FactV2 `protobuf:"bytes,2,rep,name=facts" json:"facts,omitempty"`
}

func (x *GeneratedFacts) Reset() {
	*x = GeneratedFacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratedFacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratedFacts) ProtoMessage() {}

func (x *GeneratedFacts) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratedFacts.ProtoReflect.Descriptor instead.
func (*GeneratedFacts) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{26}
}

func (x *GeneratedFacts) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *GeneratedFacts) GetFacts() []*FactV2 {
	if x != nil {
		return x.Facts
	}
	return nil
}

type SnapshotBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context     *string    `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Version     *uint32    `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	FactsV2     []*FactV2  `protobuf:"bytes,3,rep,name=facts_v2,json=factsV2" json:"facts_v2,omitempty"`
	RulesV2     []*RuleV2  `protobuf:"bytes,4,rep,name=rules_v2,json=rulesV2" json:"rules_v2,omitempty"`
	ChecksV2    []*CheckV2 `protobuf:"bytes,5,rep,name=checks_v2,json=checksV2" json:"checks_v2,omitempty"`
	Scope       []*Scope   `protobuf:"bytes,6,rep,name=scope" json:"scope,omitempty"`
	ExternalKey *PublicKey `protobuf:"bytes,7,opt,name=externalKey" json:"externalKey,omitempty"`
}

func (x *SnapshotBlock) Reset() {
	*x = SnapshotBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotBlock) ProtoMessage() {}

func (x *SnapshotBlock) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotBlock.ProtoReflect.Descriptor instead.
func (*SnapshotBlock) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{27}
}

func (x *SnapshotBlock) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

func (x *SnapshotBlock) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SnapshotBlock) GetFactsV2() []*FactV2 {
	if x != nil {
		return x.FactsV2
	}
	return nil
}

func (x *SnapshotBlock) GetRulesV2() []*RuleV2 {
	if x != nil {
		return x.RulesV2
	}
	return nil
}

func (x *SnapshotBlock) GetChecksV2() []*CheckV2 {
	if x != nil {
		return x.ChecksV2
	}
	return nil
}

func (x *SnapshotBlock) GetScope() []*Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *SnapshotBlock) GetExternalKey() *PublicKey {
	if x != nil {
		return x.ExternalKey
	}
	return nil
}

var File_biscuit_proto protoreflect.FileDescriptor

var file_biscuit_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xd9, 0x01, 0x0a, 0x07, 0x42, 0x69, 0x73, 0x63, 0x75,
	0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x3a, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x32,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x73, 0x63,
	0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x6e, 0x65, 0x78,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x71, 0x0a, 0x11, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x81, 0x01,
	0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x18, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10,
	0x00, 0x22, 0x5e, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x20, 0x0a, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0e,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xfc, 0x02, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69,
	0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x56, 0x32, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x56, 0x32, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x32, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x56, 0x32, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x12, 0x3b, 0x0a,
	0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x32,
	0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x56, 0x32, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x73, 0x63,
	0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73,
	0x22, 0xa4, 0x01, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x22, 0x28, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x74, 0x56,
	0x32, 0x12, 0x40, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x32, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x06, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x36,
	0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x32,
	0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x32, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x45,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x07, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x56, 0x32, 0x12, 0x37, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74,
	0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62,
	0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x32, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x18, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x07, 0x0a, 0x03, 0x4f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10,
	0x01, 0x22, 0x56, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x32,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x56, 0x32, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x06, 0x54, 0x65,
	0x72, 0x6d, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x73, 0x63,
	0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x07, 0x54,
	0x65, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x56, 0x32, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x3b, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x2b, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x52,
	0x03, 0x6f, 0x70, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x73,
	0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x56, 0x32, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x73,
	0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x6e, 0x0a, 0x07, 0x4f, 0x70, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x73, 0x63,
	0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4f, 0x70, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x22, 0x2a, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x02,
	0x22, 0xdc, 0x02, 0x0a, 0x08, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x38, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x69,
	0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x10, 0x08,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x75, 0x62,
	0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x75, 0x6c, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x69, 0x76, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x10, 0x0d, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x72, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x41, 0x6e, 0x64,
	0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x10,
	0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x58, 0x6f, 0x72, 0x10,
	0x13, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x14, 0x22,
	0x96, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69,
	0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x1b, 0x0a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x65, 0x6e, 0x79, 0x10, 0x01, 0x22, 0xa5, 0x02, 0x0a, 0x12, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x56,
	0x32, 0x52, 0x05, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69,
	0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a,
	0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x32, 0x52, 0x06, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69,
	0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x22, 0x9e, 0x01, 0x0a, 0x16, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x40, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x73, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x11, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0xb2, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74,
	0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52,
	0x75, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x05, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x22, 0x67, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x63, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd3, 0x03,
	0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x73, 0x63,
	0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69,
	0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x61, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62,
	0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x61,
	0x63, 0x74, 0x73, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x6d, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3e, 0x0a,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7e, 0x0a, 0x0e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x61, 0x63, 0x74, 0x73, 0x12, 0x37, 0x0a,
	0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x61,
	0x63, 0x74, 0x56, 0x32, 0x52, 0x05, 0x66, 0x61, 0x63, 0x74, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x0d,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x61, 0x63, 0x74,
	0x56, 0x32, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x73, 0x56, 0x32, 0x12, 0x38, 0x0a, 0x08, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x07, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x56, 0x32, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f,
	0x76, 0x32, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75,
	0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x32, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x56, 0x32, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69,
	0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b,
	0x70, 0x62,
}

var (
	file_biscuit_proto_rawDescOnce sync.Once
	file_biscuit_proto_rawDescData = file_biscuit_proto_rawDesc
)

func file_biscuit_proto_rawDescGZIP() []byte {
	file_biscuit_proto_rawDescOnce.Do(func() {
		file_biscuit_proto_rawDescData = protoimpl.X.CompressGZIP(file_biscuit_proto_rawDescData)
	})
	return file_biscuit_proto_rawDescData
}

var file_biscuit_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_biscuit_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_biscuit_proto_goTypes = []interface{}{
	(PublicKey_Algorithm)(0),        // 0: biscuit.format.schema.PublicKey.Algorithm
	(Scope_ScopeType)(0),            // 1: biscuit.format.schema.Scope.ScopeType
	(CheckV2_Kind)(0),               // 2: biscuit.format.schema.CheckV2.Kind
	(OpUnary_Kind)(0),               // 3: biscuit.format.schema.OpUnary.Kind
	(OpBinary_Kind)(0),              // 4: biscuit.format.schema.OpBinary.Kind
	(Policy_Kind)(0),                // 5: biscuit.format.schema.Policy.Kind
	(*Biscuit)(nil),                 // 6: biscuit.format.schema.Biscuit
	(*SignedBlock)(nil),             // 7: biscuit.format.schema.SignedBlock
	(*ExternalSignature)(nil),       // 8: biscuit.format.schema.ExternalSignature
	(*PublicKey)(nil),               // 9: biscuit.format.schema.PublicKey
	(*Proof)(nil),                   // 10: biscuit.format.schema.Proof
	(*Block)(nil),                   // 11: biscuit.format.schema.Block
	(*Scope)(nil),                   // 12: biscuit.format.schema.Scope
	(*FactV2)(nil),                  // 13: biscuit.format.schema.FactV2
	(*RuleV2)(nil),                  // 14: biscuit.format.schema.RuleV2
	(*CheckV2)(nil),                 // 15: biscuit.format.schema.CheckV2
	(*PredicateV2)(nil),             // 16: biscuit.format.schema.PredicateV2
	(*TermV2)(nil),                  // 17: biscuit.format.schema.TermV2
	(*TermSet)(nil),                 // 18: biscuit.format.schema.TermSet
	(*ExpressionV2)(nil),            // 19: biscuit.format.schema.ExpressionV2
	(*Op)(nil),                      // 20: biscuit.format.schema.Op
	(*OpUnary)(nil),                 // 21: biscuit.format.schema.OpUnary
	(*OpBinary)(nil),                // 22: biscuit.format.schema.OpBinary
	(*Policy)(nil),                  // 23: biscuit.format.schema.Policy
	(*AuthorizerPolicies)(nil),      // 24: biscuit.format.schema.AuthorizerPolicies
	(*ThirdPartyBlockRequest)(nil),  // 25: biscuit.format.schema.ThirdPartyBlockRequest
	(*ThirdPartyBlockContents)(nil), // 26: biscuit.format.schema.ThirdPartyBlockContents
	(*AuthorizerSnapshot)(nil),      // 27: biscuit.format.schema.AuthorizerSnapshot
	(*RunLimits)(nil),               // 28: biscuit.format.schema.RunLimits
	(*AuthorizerWorld)(nil),         // 29: biscuit.format.schema.AuthorizerWorld
	(*Origin)(nil),                  // 30: biscuit.format.schema.Origin
	(*Empty)(nil),                   // 31: biscuit.format.schema.Empty
	(*GeneratedFacts)(nil),          // 32: biscuit.format.schema.GeneratedFacts
	(*SnapshotBlock)(nil),           // 33: biscuit.format.schema.SnapshotBlock
}
var file_biscuit_proto_depIdxs = []int32{
	7,  // 0: biscuit.format.schema.Biscuit.authority:type_name -> biscuit.format.schema.SignedBlock
	7,  // 1: biscuit.format.schema.Biscuit.blocks:type_name -> biscuit.format.schema.SignedBlock
	10, // 2: biscuit.format.schema.Biscuit.proof:type_name -> biscuit.format.schema.Proof
	9,  // 3: biscuit.format.schema.SignedBlock.nextKey:type_name -> biscuit.format.schema.PublicKey
	8,  // 4: biscuit.format.schema.SignedBlock.externalSignature:type_name -> biscuit.format.schema.ExternalSignature
	9,  // 5: biscuit.format.schema.ExternalSignature.publicKey:type_name -> biscuit.format.schema.PublicKey
	0,  // 6: biscuit.format.schema.PublicKey.algorithm:type_name -> biscuit.format.schema.PublicKey.Algorithm
	13, // 7: biscuit.format.schema.Block.facts_v2:type_name -> biscuit.format.schema.FactV2
	14, // 8: biscuit.format.schema.Block.rules_v2:type_name -> biscuit.format.schema.RuleV2
	15, // 9: biscuit.format.schema.Block.checks_v2:type_name -> biscuit.format.schema.CheckV2
	12, // 10: biscuit.format.schema.Block.scope:type_name -> biscuit.format.schema.Scope
	9,  // 11: biscuit.format.schema.Block.publicKeys:type_name -> biscuit.format.schema.PublicKey
	1,  // 12: biscuit.format.schema.Scope.scopeType:type_name -> biscuit.format.schema.Scope.ScopeType
	16, // 13: biscuit.format.schema.FactV2.predicate:type_name -> biscuit.format.schema.PredicateV2
	16, // 14: biscuit.format.schema.RuleV2.head:type_name -> biscuit.format.schema.PredicateV2
	16, // 15: biscuit.format.schema.RuleV2.body:type_name -> biscuit.format.schema.PredicateV2
	19, // 16: biscuit.format.schema.RuleV2.expressions:type_name -> biscuit.format.schema.ExpressionV2
	12, // 17: biscuit.format.schema.RuleV2.scope:type_name -> biscuit.format.schema.Scope
	14, // 18: biscuit.format.schema.CheckV2.queries:type_name -> biscuit.format.schema.RuleV2
	2,  // 19: biscuit.format.schema.CheckV2.kind:type_name -> biscuit.format.schema.CheckV2.Kind
	17, // 20: biscuit.format.schema.PredicateV2.terms:type_name -> biscuit.format.schema.TermV2
	18, // 21: biscuit.format.schema.TermV2.set:type_name -> biscuit.format.schema.TermSet
	17, // 22: biscuit.format.schema.TermSet.set:type_name -> biscuit.format.schema.TermV2
	20, // 23: biscuit.format.schema.ExpressionV2.ops:type_name -> biscuit.format.schema.Op
	17, // 24: biscuit.format.schema.Op.value:type_name -> biscuit.format.schema.TermV2
	21, // 25: biscuit.format.schema.Op.unary:type_name -> biscuit.format.schema.OpUnary
	22, // 26: biscuit.format.schema.Op.Binary:type_name -> biscuit.format.schema.OpBinary
	3,  // 27: biscuit.format.schema.OpUnary.kind:type_name -> biscuit.format.schema.OpUnary.Kind
	4,  // 28: biscuit.format.schema.OpBinary.kind:type_name -> biscuit.format.schema.OpBinary.Kind
	14, // 29: biscuit.format.schema.Policy.queries:type_name -> biscuit.format.schema.RuleV2
	5,  // 30: biscuit.format.schema.Policy.kind:type_name -> biscuit.format.schema.Policy.Kind
	13, // 31: biscuit.format.schema.AuthorizerPolicies.facts:type_name -> biscuit.format.schema.FactV2
	14, // 32: biscuit.format.schema.AuthorizerPolicies.rules:type_name -> biscuit.format.schema.RuleV2
	15, // 33: biscuit.format.schema.AuthorizerPolicies.checks:type_name -> biscuit.format.schema.CheckV2
	23, // 34: biscuit.format.schema.AuthorizerPolicies.policies:type_name -> biscuit.format.schema.Policy
	9,  // 35: biscuit.format.schema.ThirdPartyBlockRequest.previousKey:type_name -> biscuit.format.schema.PublicKey
	9,  // 36: biscuit.format.schema.ThirdPartyBlockRequest.publicKeys:type_name -> biscuit.format.schema.PublicKey
	8,  // 37: biscuit.format.schema.ThirdPartyBlockContents.externalSignature:type_name -> biscuit.format.schema.ExternalSignature
	28, // 38: biscuit.format.schema.AuthorizerSnapshot.limits:type_name -> biscuit.format.schema.RunLimits
	29, // 39: biscuit.format.schema.AuthorizerSnapshot.world:type_name -> biscuit.format.schema.AuthorizerWorld
	9,  // 40: biscuit.format.schema.AuthorizerWorld.publicKeys:type_name -> biscuit.format.schema.PublicKey
	33, // 41: biscuit.format.schema.AuthorizerWorld.blocks:type_name -> biscuit.format.schema.SnapshotBlock
	33, // 42: biscuit.format.schema.AuthorizerWorld.authorizerBlock:type_name -> biscuit.format.schema.SnapshotBlock
	23, // 43: biscuit.format.schema.AuthorizerWorld.authorizerPolicies:type_name -> biscuit.format.schema.Policy
	32, // 44: biscuit.format.schema.AuthorizerWorld.generatedFacts:type_name -> biscuit.format.schema.GeneratedFacts
	31, // 45: biscuit.format.schema.Origin.authorizer:type_name -> biscuit.format.schema.Empty
	30, // 46: biscuit.format.schema.GeneratedFacts.origins:type_name -> biscuit.format.schema.Origin
	13, // 47: biscuit.format.schema.GeneratedFacts.facts:type_name -> biscuit.format.schema.FactV2
	13, // 48: biscuit.format.schema.SnapshotBlock.facts_v2:type_name -> biscuit.format.schema.FactV2
	14, // 49: biscuit.format.schema.SnapshotBlock.rules_v2:type_name -> biscuit.format.schema.RuleV2
	15, // 50: biscuit.format.schema.SnapshotBlock.checks_v2:type_name -> biscuit.format.schema.CheckV2
	12, // 51: biscuit.format.schema.SnapshotBlock.scope:type_name -> biscuit.format.schema.Scope
	9,  // 52: biscuit.format.schema.SnapshotBlock.externalKey:type_name -> biscuit.format.schema.PublicKey
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_biscuit_proto_init() }
func file_biscuit_proto_init() {
	if File_biscuit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biscuit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Biscuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredicateV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressionV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Op); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpUnary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizerPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThirdPartyBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThirdPartyBlockContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizerSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizerWorld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratedFacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_biscuit_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Proof_NextSecret)(nil),
		(*Proof_FinalSignature)(nil),
	}
	file_biscuit_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Scope_ScopeType_)(nil),
		(*Scope_PublicKey)(nil),
	}
	file_biscuit_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*TermV2_Variable)(nil),
		(*TermV2_Integer)(nil),
		(*TermV2_String_)(nil),
		(*TermV2_Date)(nil),
		(*TermV2_Bytes)(nil),
		(*TermV2_Bool)(nil),
		(*TermV2_Set)(nil),
	}
	file_biscuit_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Op_Value)(nil),
		(*Op_Unary)(nil),
		(*Op_Binary)(nil),
	}
	file_biscuit_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Origin_Authorizer)(nil),
		(*Origin_Origin)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biscuit_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_biscuit_proto_goTypes,
		DependencyIndexes: file_biscuit_proto_depIdxs,
		EnumInfos:         file_biscuit_proto_enumTypes,
		MessageInfos:      file_biscuit_proto_msgTypes,
	}.Build()
	File_biscuit_proto = out.File
	file_biscuit_proto_rawDesc = nil
	file_biscuit_proto_goTypes = nil
	file_biscuit_proto_depIdxs = nil
}
